name: Update latest.svg per MessageStructureView

permissions:
  contents: write

on:
  push:
    branches: [ main ]
    paths:
      - '**/MessageStructureView/*.svg'
  workflow_dispatch:

jobs:
  pick-latest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Zet per map de meest recente .svg als latest.svg
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          changed=0
          for dir in **/MessageStructureView; do
            # --- SPECIALE CASE: Feedback Message ---
            if [[ "$dir" == *"VBPUO_Feedback_Message/MessageStructureView" ]]; then
              src="$dir/Feedback_message.svg"   # vaste bron
              target="$dir/latest.svg"
              if [ -f "$src" ]; then
                if [ ! -f "$target" ] || ! cmp -s "$src" "$target"; then
                  cp "$src" "$target"
                  git add "$target"
                  echo "Feedback: Updated $target -> $(basename "$src")"
                  changed=1
                else
                  echo "Feedback: $target is al up-to-date."
                fi
              else
                echo "Feedback: BRON BESTAAT NIET: $src (sla over)"
              fi
              continue
            fi

            # --- GENERIEKE CASE: kies nieuwste .svg in de map ---
            # verzamel alle .svg behalve latest.svg (en negeer submappen zoals archive/)
            mapfile -t svgs < <(find "$dir" -maxdepth 1 -type f -name '*.svg' ! -name 'latest.svg' -printf '%p\n')
            [ ${#svgs[@]} -eq 0 ] && { echo "Geen SVG's in $dir, sla over."; continue; }

            newest=""
            newest_ts=0
            for f in "${svgs[@]}"; do
              ts=$(git log -1 --format=%ct -- "$f" 2>/dev/null || echo 0)
              (( ts > newest_ts )) && { newest_ts=$ts; newest="$f"; }
            done

            target="$dir/latest.svg"
            if [ -n "$newest" ]; then
              if [ ! -f "$target" ] || ! cmp -s "$newest" "$target"; then
                cp "$newest" "$target"
                git add "$target"
                echo "Updated $target -> $(basename "$newest")"
                changed=1
              else
                echo "$target is al up-to-date."
              fi
            fi
          done

          if [ "$changed" -eq 1 ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: refresh latest.svg per MessageStructureView (incl. Feedback special case)"
            git push
          else
            echo "Niets te updaten."
          fi
